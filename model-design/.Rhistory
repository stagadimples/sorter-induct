library(RODBC)
con <- odbcConnect(dsn = "stay_ahead", pwd = "Formula1")
library(sqldf)
df = sqlQuery(con, "select table_name from user_tables")
df
sales = sqlQuery(con, "select * from sales")
nrow(sales)
retail = sqlQuery(con, "select * from retail")
nrow
nrow(retail)
orders = sqlQuery(con, "select * from orders")
nrow(orders)
orders
# load libraries
library(tidyverse)
# load libraries
library(tidyverse); library(lubridate)
rm(list = ls())
gc()
dt <- read.table("data-raw/rawdata.txt", header = T, sep = ",")
head(dt)
names(dt) <- tolower(names(dt))
head(dt)
# load libraries
library(tidyverse); library(lubridate)
dt <- read.table("data-raw/rawdata.txt", header = T, sep = ",")
names(dt) <- tolower(names(dt))
sorter <- dt %>%
select(order_no, customer_selling_system_no, shipping_barcode, pack_user,
area_packed, handling_type, classification, area_type, units, products,
sorter_time) %>%
mutate(sorter_time = ymd_hms(sorter_time))
head(sorter)
prop.table(table(sorter$classification))
sorter <- dt %>%
select(order_no, customer_selling_system_no, shipping_barcode, pack_user,
area_packed, handling_type, classification, area_type, units, products,
sorter_time) %>%
mutate(sorter_time = ymd_hms(sorter_time)) %>%
group_by(h(sorter_time)) %>%
summarise(parcels = n_distinct(shipping_barcode))
h <- hour(sorter$sorter_time)
head(h)
head(sorter)
sorter <- dt %>%
select(order_no, customer_selling_system_no, shipping_barcode, pack_user,
area_packed, handling_type, classification, area_type, units, products,
sorter_time) %>%
mutate(sorter_time = ymd_hms(sorter_time)) %>%
group_by(hour(sorter_time)) %>%
summarise(parcels = n_distinct(shipping_barcode))
head(sorter)
unique(dt$classification)
sorter <- dt %>%
select(order_no, customer_selling_system_no, shipping_barcode, pack_user,
area_packed, handling_type, classification, area_type, units, products,
sorter_time) %>%
mutate(sorter_time = ymd_hms(sorter_time)) %>%
group_by(hour(sorter_time)) %>%
summarise(parcels = n_distinct(shipping_barcode),
bagging = n_distinct(ifelse(classification = "Bagging Line", shipping_lpn)))
?if_else
sorter <- dt %>%
select(order_no, customer_selling_system_no, shipping_barcode, pack_user,
area_packed, handling_type, classification, area_type, units, products,
sorter_time) %>%
mutate(sorter_time = ymd_hms(sorter_time)) %>%
group_by(hour(sorter_time)) %>%
summarise(parcels = n_distinct(shipping_barcode),
bagging = n_distinct(if_else(classification = "Bagging Line", shipping_lpn)))
sorter <- dt %>%
select(order_no, customer_selling_system_no, shipping_barcode, pack_user,
area_packed, handling_type, classification, area_type, units, products,
sorter_time) %>%
mutate(sorter_time = ymd_hms(sorter_time)) %>%
group_by(hour(sorter_time)) %>%
summarise(parcels = n_distinct(shipping_barcode),
bagging = n_distinct(if_else(classification == "Bagging Line", shipping_lpn)))
sorter <- dt %>%
select(order_no, customer_selling_system_no, shipping_barcode, pack_user,
area_packed, handling_type, classification, area_type, units, products,
sorter_time) %>%
mutate(sorter_time = ymd_hms(sorter_time)) %>%
group_by(hour(sorter_time)) %>%
summarise(parcels = n_distinct(shipping_barcode),
bagging = n_distinct(if_else(classification == "Bagging Line", shipping_barcode)))
sorter <- dt %>%
select(order_no, customer_selling_system_no, shipping_barcode, pack_user,
area_packed, handling_type, classification, area_type, units, products,
sorter_time) %>%
mutate(sorter_time = ymd_hms(sorter_time)) %>%
group_by(hour(sorter_time)) %>%
summarise(parcels = n_distinct(shipping_barcode),
bagging = n_distinct(if_else(classification == "Bagging Line", shipping_barcode, NULL)))
head(sorter)
length(unique(dt$shipping_barcode[dt$classification == "Bagging Line"]))
sorter <- dt %>%
select(order_no, customer_selling_system_no, shipping_barcode, pack_user,
area_packed, handling_type, classification, area_type, units, products,
sorter_time) %>%
mutate(sorter_time = ymd_hms(sorter_time)) %>%
group_by(hour(sorter_time)) %>%
summarise(parcels = n_distinct(shipping_barcode),
bagging = n_distinct(ifelse(classification == "Bagging Line", shipping_barcode, NULL)))
t <- dt[dt$classification == "Bagging Line", ]
head(t)
t$hr <- hour(t$sorter_time)
head(t)
ts <- t[t$hr == 0, ]
head(ts)
range(t$hr)
ts <- t[t$hr == 1, ]
head(ts)
unique(ts$shipping_barcode)
length(unique(ts$shipping_barcode))
dt <- read.table("data-raw/rawdata.txt", header = T, sep = ",")
head(dt)
dt$hr <- hour(ymd_hms(dt$DELIVERY_TIME))
head(dt)
t <- dt[dt$classification == "Bagging Line" & dt$hr == 0, ]
head(t)
t <- dt[dt$classification == "Bagging Line" & dt$hr == 1, ]
head(t)
unique(dt$CLASSIFICATION)
t <- dt[dt$classification == "Bagging Line" & dt$hr == 1, ]
head(t)
sorter <- dt %>%
select(order_no, customer_selling_system_no, shipping_barcode, pack_user,
area_packed, handling_type, classification, area_type, units, products,
sorter_time) %>%
mutate(sorter_time = ymd_hms(sorter_time)) %>%
group_by(hour(sorter_time)) %>%
summarise(parcels = n_distinct(shipping_barcode),
bagging = n_distinct(if_else(classification == "Bagging Line", shipping_barcode, NA)))
# load libraries
library(tidyverse); library(lubridate)
dt <- read.table("data-raw/rawdata.txt", header = T, sep = ",")
names(dt) <- tolower(names(dt))
sorter <- dt %>%
select(order_no, customer_selling_system_no, shipping_barcode, pack_user,
area_packed, handling_type, classification, area_type, units, products,
sorter_time) %>%
mutate(sorter_time = ymd_hms(sorter_time)) %>%
group_by(hour(sorter_time)) %>%
summarise(parcels = n_distinct(shipping_barcode),
bagging = n_distinct(if_else(classification == "Bagging Line", shipping_barcode, NA)))
sorter <- dt %>%
select(order_no, customer_selling_system_no, shipping_barcode, pack_user,
area_packed, handling_type, classification, area_type, units, products,
sorter_time) %>%
mutate(sorter_time = ymd_hms(sorter_time)) %>%
group_by(hour(sorter_time)) %>%
summarise(parcels = n_distinct(shipping_barcode),
bagging = n_distinct(if_else(classification == "Bagging Line", shipping_barcode, NULL)),
mpc = n_distinct(if_else(classification == "MediumPickingCarton", shipping_barcode, NULL)))
head(sorter)
